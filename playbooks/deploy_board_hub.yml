- hosts: k3s_master
  become: yes
  vars:
    board_hub_path: /opt/board-hub
    backend_image: "imoresdev/board-hub:backend"
    frontend_image: "imoresdev/board-hub:frontend"
    registry_user: "{{ lookup('env','DOCKER_USER') }}"
    registry_password: "{{ lookup('env','DOCKER_PASS') }}"

  tasks:

    # -----------------------------
    # Ensure board-hub directory exists
    # -----------------------------
    - name: Create board-hub directory
      file:
        path: "{{ board_hub_path }}"
        state: directory
        mode: '0755'

    # -----------------------------
    # Install unzip
    # -----------------------------
    - name: Ensure unzip is installed
      apt:
        name: unzip
        state: present
        update_cache: yes

    # -----------------------------
    # Upload board-hub.zip
    # -----------------------------
    - name: Upload board-hub.zip
      copy:
        src: ../board-hub.zip
        dest: "{{ board_hub_path }}/board-hub.zip"
        mode: '0644'

    # -----------------------------
    # Unzip board-hub.zip
    # -----------------------------
    - name: Extract board-hub.zip
      unarchive:
        src: "{{ board_hub_path }}/board-hub.zip"
        dest: "{{ board_hub_path }}"
        remote_src: yes

    # -----------------------------
    # Remove the zip file (optional)
    # -----------------------------
    - name: Remove board-hub.zip
      file:
        path: "{{ board_hub_path }}/board-hub.zip"
        state: absent

    # -----------------------------
    # Debug: Check extracted contents
    # -----------------------------
    - name: List contents of board-hub directory
      shell: find "{{ board_hub_path }}" -type f -name "*.py" -o -name "*.js" -o -name "*.json" -o -name "requirements.txt" -o -name "package.json" | head -20
      register: extracted_contents

    - name: Display extracted contents
      debug:
        var: extracted_contents.stdout_lines

    - name: Check if backend directory exists
      stat:
        path: "{{ board_hub_path }}/backend"
      register: backend_dir

    - name: Check if frontend directory exists
      stat:
        path: "{{ board_hub_path }}/frontend"
      register: frontend_dir

    - name: Display directory status
      debug:
        msg: |
          Backend directory exists: {{ backend_dir.stat.exists }}
          Frontend directory exists: {{ frontend_dir.stat.exists }}

    # -----------------------------
    # Now Dockerfiles and builds will work from unzipped folders
    # -----------------------------
    - name: Create backend Dockerfile
      copy:
        dest: "{{ board_hub_path }}/backend/Dockerfile"
        content: |
          FROM python:3.11-slim
          WORKDIR /app
          
          # Install uv
          RUN pip install uv
          
          # Copy requirements first for better caching
          COPY requirements.txt .
          
          # Create virtual environment and install dependencies using uv
          RUN uv venv .venv && \
              . .venv/bin/activate && \
              uv pip install -r requirements.txt
          
          # Copy the rest of the application
          COPY . .
          
          # Make run script executable
          RUN chmod +x run.sh
          
          EXPOSE 8000
          
          # Use the run script but modify for production
          CMD ["/bin/bash", "-c", "source .venv/bin/activate && uvicorn main:app --host 0.0.0.0 --port 8000"]

    - name: Create frontend Dockerfile
      copy:
        dest: "{{ board_hub_path }}/frontend/Dockerfile"
        content: |
          FROM node:20-slim
          WORKDIR /app
          COPY package.json yarn.lock ./
          RUN yarn install --production
          COPY . .
          EXPOSE 3000
          CMD ["yarn","dev"]

    # -----------------------------
    # Install Docker and Dependencies
    # -----------------------------
    - name: Install required packages for Docker
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
        update_cache: yes

    - name: Add Docker's official GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: Install Docker CE
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Add current user to docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    # Wait a moment for group changes to take effect
    - name: Reset SSH connection to allow user group changes to take effect
      meta: reset_connection

    # -----------------------------
    # Docker Registry Login (Alternative Method)
    # -----------------------------
    - name: Log into Docker registry using shell
      shell: echo "{{ registry_password }}" | docker login --username "{{ registry_user }}" --password-stdin
      when: registry_user is defined and registry_password is defined
      no_log: true

    # -----------------------------
    # Build and Push Docker Images
    # -----------------------------
    - name: Build and push backend Docker image
      shell: |
        cd "{{ board_hub_path }}/backend"
        echo "Building backend image..."
        docker build -t "{{ backend_image }}" . || exit 1
        echo "Pushing backend image..."
        docker push "{{ backend_image }}" || exit 1
        echo "Backend build and push completed successfully"
      register: backend_build_result
      failed_when: backend_build_result.rc != 0

    - name: Display backend build output on failure
      debug:
        var: backend_build_result
      when: backend_build_result.rc != 0

    - name: Build and push frontend Docker image
      shell: |
        cd "{{ board_hub_path }}/frontend"
        echo "Building frontend image..."
        docker build -t "{{ frontend_image }}" . || exit 1
        echo "Pushing frontend image..."
        docker push "{{ frontend_image }}" || exit 1
        echo "Frontend build and push completed successfully"
      register: frontend_build_result
      failed_when: frontend_build_result.rc != 0

    - name: Display frontend build output on failure
      debug:
        var: frontend_build_result
      when: frontend_build_result.rc != 0

    - name: Display build results
      debug:
        msg: |
          Backend build: {{ 'SUCCESS' if backend_build_result.rc == 0 else 'FAILED' }}
          Frontend build: {{ 'SUCCESS' if frontend_build_result.rc == 0 else 'FAILED' }}

    # -----------------------------
    # Create Kubernetes Namespace
    # -----------------------------
    - name: Create board-hub namespace
      kubernetes.core.k8s:
        name: board-hub
        api_version: v1
        kind: Namespace
        state: present
        kubeconfig: /etc/rancher/k3s/k3s.yaml

    # -----------------------------
    # Deploy Backend Application
    # -----------------------------
    - name: Deploy backend deployment
      kubernetes.core.k8s:
        state: present
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: board-hub-backend
            namespace: board-hub
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: board-hub-backend
            template:
              metadata:
                labels:
                  app: board-hub-backend
              spec:
                containers:
                - name: backend
                  image: "{{ backend_image }}"
                  ports:
                  - containerPort: 8000
                  env:
                  - name: PORT
                    value: "8000"
                  resources:
                    requests:
                      memory: "256Mi"
                      cpu: "250m"
                    limits:
                      memory: "512Mi"
                      cpu: "500m"
                  readinessProbe:
                    httpGet:
                      path: /health
                      port: 8000
                    initialDelaySeconds: 10
                    periodSeconds: 5
                  livenessProbe:
                    httpGet:
                      path: /health
                      port: 8000
                    initialDelaySeconds: 30
                    periodSeconds: 10

    - name: Deploy backend service
      kubernetes.core.k8s:
        state: present
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: board-hub-backend-service
            namespace: board-hub
          spec:
            selector:
              app: board-hub-backend
            ports:
            - protocol: TCP
              port: 8000
              targetPort: 8000
            type: ClusterIP

    # -----------------------------
    # Deploy Frontend Application
    # -----------------------------
    - name: Deploy frontend deployment
      kubernetes.core.k8s:
        state: present
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: board-hub-frontend
            namespace: board-hub
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: board-hub-frontend
            template:
              metadata:
                labels:
                  app: board-hub-frontend
              spec:
                containers:
                - name: frontend
                  image: "{{ frontend_image }}"
                  ports:
                  - containerPort: 3000
                  env:
                  - name: NEXT_PUBLIC_API_URL
                    value: "http://board-hub-backend-service:8000"
                  resources:
                    requests:
                      memory: "256Mi"
                      cpu: "250m"
                    limits:
                      memory: "512Mi"
                      cpu: "500m"
                  readinessProbe:
                    httpGet:
                      path: /
                      port: 3000
                    initialDelaySeconds: 15
                    periodSeconds: 5
                  livenessProbe:
                    httpGet:
                      path: /
                      port: 3000
                    initialDelaySeconds: 45
                    periodSeconds: 10

    - name: Deploy frontend service
      kubernetes.core.k8s:
        state: present
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: board-hub-frontend-service
            namespace: board-hub
          spec:
            selector:
              app: board-hub-frontend
            ports:
            - protocol: TCP
              port: 3000
              targetPort: 3000
            type: ClusterIP

    # -----------------------------
    # Create Ingress for External Access
    # -----------------------------
    - name: Deploy ingress
      kubernetes.core.k8s:
        state: present
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: board-hub-ingress
            namespace: board-hub
            annotations:
              nginx.ingress.kubernetes.io/rewrite-target: /
              nginx.ingress.kubernetes.io/ssl-redirect: "false"
          spec:
            ingressClassName: nginx
            rules:
            - host: board-hub.local  # Change this to your domain
              http:
                paths:
                - path: /api
                  pathType: Prefix
                  backend:
                    service:
                      name: board-hub-backend-service
                      port:
                        number: 8000
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: board-hub-frontend-service
                      port:
                        number: 3000

    # -----------------------------
    # Wait for deployments to be ready
    # -----------------------------
    - name: Wait for backend deployment to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: board-hub-backend
        namespace: board-hub
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        wait: true
        wait_condition:
          type: Progressing
          status: "True"
          reason: NewReplicaSetAvailable
        wait_timeout: 300

    - name: Wait for frontend deployment to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: board-hub-frontend
        namespace: board-hub
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        wait: true
        wait_condition:
          type: Progressing
          status: "True"
          reason: NewReplicaSetAvailable
        wait_timeout: 300

    # -----------------------------
    # Display deployment information
    # -----------------------------
    - name: Get ingress information
      kubernetes.core.k8s_info:
        api_version: networking.k8s.io/v1
        kind: Ingress
        name: board-hub-ingress
        namespace: board-hub
        kubeconfig: /etc/rancher/k3s/k3s.yaml
      register: ingress_info

    - name: Display deployment status
      debug:
        msg: |
          Board-Hub deployment completed successfully!
          
          Frontend URL: http://board-hub.local (add this to your hosts file)
          Backend API: http://board-hub.local/api
          
          To access locally, add this line to your /etc/hosts file:
          {{ ansible_default_ipv4.address }} board-hub.local
          
          Kubectl commands to check status:
          kubectl get pods -n board-hub
          kubectl get services -n board-hub
          kubectl get ingress -n board-hub